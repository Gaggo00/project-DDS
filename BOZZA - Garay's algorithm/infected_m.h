//
// Generated file, do not edit! Created by opp_msgtool 6.0 from infected.msg.
//

#ifndef __INFECTED_M_H
#define __INFECTED_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Infected;
/**
 * Class generated from <tt>infected.msg:1</tt> by opp_msgtool.
 * <pre>
 * message Infected
 * {
 *     int process[];
 * }
 * </pre>
 */
class Infected : public ::omnetpp::cMessage
{
  protected:
    int *process = nullptr;
    size_t process_arraysize = 0;

  private:
    void copy(const Infected& other);

  protected:
    bool operator==(const Infected&) = delete;

  public:
    Infected(const char *name=nullptr, short kind=0);
    Infected(const Infected& other);
    virtual ~Infected();
    Infected& operator=(const Infected& other);
    virtual Infected *dup() const override {return new Infected(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setProcessArraySize(size_t size);
    virtual size_t getProcessArraySize() const;
    virtual int getProcess(size_t k) const;
    virtual void setProcess(size_t k, int process);
    virtual void insertProcess(size_t k, int process);
    [[deprecated]] void insertProcess(int process) {appendProcess(process);}
    virtual void appendProcess(int process);
    virtual void eraseProcess(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Infected& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Infected& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Infected *fromAnyPtr(any_ptr ptr) { return check_and_cast<Infected*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INFECTED_M_H

